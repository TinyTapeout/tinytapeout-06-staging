diff --git a/nix/magic.nix b/nix/magic.nix
index 46181cc7..3a39e5a2 100644
--- a/nix/magic.nix
+++ b/nix/magic.nix
@@ -44,13 +44,13 @@
 }:
 clangStdenv.mkDerivation rec {
   name = "magic-vlsi";
-  rev = "83ed73ac522c6bbd5900240c2d02e399820cbc26";
+  rev = "cb73ebfab02e6eed32f08287b45522c61ef542f8";
 
   src = fetchFromGitHub {
     owner = "RTimothyEdwards";
     repo = "magic";
     inherit rev;
-    sha256 = "sha256-iDEYgwtotCJ6gXcNaMohSPmHeYFCplKYD8SXwnNF3/E=";
+    sha256 = "sha256-NH0CEEQd6PfXO/4+REwm45Xd5ySS0UwRmT5scnxGzmE=";
   };
 
   nativeBuildInputs = [python3 gnused];
diff --git a/openlane/scripts/magic/lef.tcl b/openlane/scripts/magic/lef.tcl
index dea8ebe7..8ee541f1 100644
--- a/openlane/scripts/magic/lef.tcl
+++ b/openlane/scripts/magic/lef.tcl
@@ -45,6 +45,6 @@ if { $::env(MAGIC_WRITE_FULL_LEF) } {
     lef write $::env(STEP_DIR)/$::env(DESIGN_NAME).lef
 } else {
     puts "\[INFO] Writing abstract LEF"
-    lef write $::env(STEP_DIR)/$::env(DESIGN_NAME).lef -hide
+    lef write $::env(STEP_DIR)/$::env(DESIGN_NAME).lef -hide -pinonly
 }
 puts "\[INFO] LEF Write Complete"
diff --git a/openlane/scripts/odbpy/apply_def_template.py b/openlane/scripts/odbpy/apply_def_template.py
index b1dc941f..b6e89f6f 100644
--- a/openlane/scripts/odbpy/apply_def_template.py
+++ b/openlane/scripts/odbpy/apply_def_template.py
@@ -20,18 +20,25 @@
 
 @click.command()
 @click.option("-t", "--def-template", required=True, help="Template DEF")
+@click.option(
+    "--copy-def-power",
+    default=False,
+    is_flag=True,
+    help="Whether to copy power pins from the DEF template",
+)
 @click.option(
     "--permissive/--strict",
     default=False,
     help="Whether to treat pin matching permissively (ignoring non-matching pins) or strictly (flagging all non-matching pins as errors)",
 )
 @click_odb
-def cli(reader, input_lefs, permissive, def_template):
+def cli(reader, input_lefs, permissive, copy_def_power, def_template):
     defutil.relocate_pins(
         reader.db,
         input_lefs,
         def_template,
         permissive,
+        copy_def_power,
     )
     area = defutil.get_die_area(def_template, input_lefs)
     area_metric = f"{area[0]} {area[1]} {area[2]} {area[3]}"
diff --git a/openlane/scripts/odbpy/defutil.py b/openlane/scripts/odbpy/defutil.py
index 9d8b4d6c..059c705d 100644
--- a/openlane/scripts/odbpy/defutil.py
+++ b/openlane/scripts/odbpy/defutil.py
@@ -102,7 +102,7 @@ def check_pin_grid(manufacturing_grid, dbu_per_microns, pin_name, pin_coordinate
         return True
 
 
-def relocate_pins(db, input_lefs, template_def, permissive):
+def relocate_pins(db, input_lefs, template_def, permissive, copy_def_power=False):
     # --------------------------------
     # 1. Find list of all bterms in existing database
     # --------------------------------
@@ -159,7 +159,7 @@ def relocate_pins(db, input_lefs, template_def, permissive):
     )
 
     # --------------------------------
-    # 3. Create a dict with net -> pin location. Check for only one pin location to exist, overwise return an error
+    # 3. Create a dict with net -> pin locations.
     # --------------------------------
     template_bterm_locations = dict()
 
@@ -230,12 +230,28 @@ def relocate_pins(db, input_lefs, template_def, permissive):
     if mismatches_found and not permissive:
         exit(os.EX_DATAERR)
 
+    if copy_def_power:
+        # If asked, we copy power pins from template
+        for bterm in template_bterms:
+            if bterm.getSigType() not in ["POWER", "GROUND"]:
+                continue
+            pin_name = bterm.getName()
+            pin_net = odb.dbNet.create(output_block, pin_name, True)
+            pin_net.setSpecial()
+            pin_net.setSigType(bterm.getSigType())
+            pin_bterm = odb.dbBTerm.create(pin_net, pin_name)
+            pin_bterm.setSigType(bterm.getSigType())
+            output_bterms.append(pin_bterm)
+
     grid_errors = False
     for output_bterm in output_bterms:
         name = output_bterm.getName()
         output_bpins = output_bterm.getBPins()
 
-        if name not in template_bterm_locations or name not in all_bterm_names:
+        if name not in template_bterm_locations:
+            continue
+
+        if (name not in all_bterm_names) and not copy_def_power:
             continue
 
         for output_bpin in output_bpins:
diff --git a/openlane/steps/odb.py b/openlane/steps/odb.py
index d0b9b0ce..ac3e192b 100644
--- a/openlane/steps/odb.py
+++ b/openlane/steps/odb.py
@@ -197,6 +197,12 @@ class ApplyDEFTemplate(OdbpyStep):
             "Whether to require that the pin set of the DEF template and the design should be identical. In permissive mode, pins that are in the design and not in the template will be excluded, and vice versa.",
             default="strict",
         ),
+        Variable(
+            "FP_TEMPLATE_COPY_POWER_PINS",
+            bool,
+            "Whether to copy all power pins from the DEF template to the design.",
+            default=False,
+        ),
     ]
 
     def get_script_path(self):
@@ -207,11 +213,14 @@ def get_script_path(self):
         )
 
     def get_command(self) -> List[str]:
-        return super().get_command() + [
+        args = [
             "--def-template",
             self.config["FP_DEF_TEMPLATE"],
             f"--{self.config['FP_TEMPLATE_MATCH_MODE']}",
         ]
+        if self.config["FP_TEMPLATE_COPY_POWER_PINS"]:
+            args.append("--copy-def-power")
+        return super().get_command() + args
 
     def run(self, state_in, **kwargs) -> Tuple[ViewsUpdate, MetricsUpdate]:
         if self.config["FP_DEF_TEMPLATE"] is None:
