documentation:
  author: Tommy Thorn
  bidirectional:
  - output debug[7]
  - output debug[6]
  - output debug[5]
  - output debug[4]
  - output debug[3]
  - output debug[2]
  - output debug[1]
  - output debug[0]
  clock_hz: 31500000
  description: It's a 12-hour clock, drawn with triangles rendered by a race-the-beam
    triangle render
  discord: .tommythorn
  doc_link: TBD
  external_hw: TinyVGA, 31.5 MHz clock, reset, hour & min buttons
  how_it_works: '

    Every frame the 640x480 VGA matrix is scanned, advancing the

    state of the intersecting lines of the three triangles.  If the

    (x,y) coordinate of the "beam" lines on the positive side of

    each line, the beam is inside the triangle.  Among the visible

    triangles, the highest priority triangle sets the color, else we

    default to a grey color.


    The coordinates of the triangles are stored in a table (didn''t

    have time to implement a CORDIC algorithm) and the render

    equations are recalculated by a small state machine in the amble

    time left by the vertical blanking interval.


    The algorithm might be easily understood by examining the

    software model in Rust, in the `sw` directory.

    '
  how_to_test: 'Hook up the Tiny VGA interface and connect a VGA monitor.  Hope it
    works.

    '
  inputs:
  - clock, we depend on 31.5 MHz clock for video generation
  - reset
  - hour, active high to advance the hour hand
  - minute, active high to advance the minute hand
  - debugsel[3], select between 16 variables to inspect, to be detailed later
  - debugsel[2]
  - debugsel[1]
  - debugsel[0]
  language: Verilog
  outputs:
  - R1
  - G1
  - B1
  - vsync
  - R0
  - G0
  - B0
  - hsync
  picture: TBD
  tag: clock,video
  title: No Time for Squares
project:
  source_files:
  - tt_um_no_time_for_squares_tommythorn.v
  - clock.v
  - vga.v
  - tile.v
  tiles: 3x2
  top_module: tt_um_no_time_for_squares_tommythorn_dup2
  wokwi_id: 0
yaml_version: 4
