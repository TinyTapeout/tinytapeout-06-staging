documentation:
  author: algofoogle (Anton Maurovic)
  bidirectional:
  - 'Out: SPI /CS'
  - 'Out: SPI io[0] / MOSI'
  - 'Out: SPI io[1] / MISO'
  - 'Out: SPI SCLK'
  - 'Out: Test_out'
  - 'Out: SPI /RST'
  - 'Out: SPI io[2] (/WP)'
  - 'Out: SPI io[3] (/HLD)'
  clock_hz: 25.0MHz, 25.175MHz, or 26.6175MHz
  description: Test reading/buffering/displaying SPI flash ROM data on VGA display
  discord: algofoogle
  doc_link: https://github.com/algofoogle/tt05-vga-spi-rom
  external_hw: VGA DAC (RGB111 or 222 depth) and SPI flash memory
  how_it_works: "TBC.\n\nReads data from an SPI flash ROM (or any memory compatible\
    \ with, say, W25Q10 or above)\nand displays it on a VGA display.\n\nDrives a display\
    \ at one of two resolutions (selectable by `vga_mode`):\n\n*   0: 640x480 60Hz,\
    \ from 25.1750MHz clock (though 25.0000MHz should do OK).\n*   1: 1440x900 60Hz,\
    \ from 26.6175MHz (or as close as you can get to it).\n\nNOTE: Some monitors will\
    \ also sync 640x480 using the 26.6175MHz clock that's otherwise\nused for vga_mode\
    \ 1... they'll get ~63Hz instead of 60Hz. That means if you can get\nnear this\
    \ frequency, you might find it to be a good middle ground that allows you to\n\
    switch live between 640x480 and 1440x900. My HP L1908wm monitor works fine this\
    \ way for\nclocks in the range of 26.3MHz to 27.0MHz, and might even work *slightly*\
    \ beyond that.\n\nThe flash memory contents are displayed using two alternating\
    \ line modes (4 lines each):\n\n1.  As VGA scans near the middle of each line,\
    \ read up to 136 bits (17 bytes) and\n    store in local register memory, then\
    \ display on the next scanline. NOTE:\n    Because it buffers to memory on one\
    \ line and displays the buffer on the next\n    line, the *first* line is blanked\
    \ out automatically by the design to avoid confusion.\n    Hence you only actually\
    \ see 3 lines for this line mode, before it switches to\n    the next line mode.\n\
    2.  Just send unregistered SPI data output (MISO) directly to the VGA display.\n\
    \    In this line mode, you should see 4 identical lines before it switches back\n\
    \    to line mode above.\n\nThese two line modes are timed to line up, so we can\
    \ check for consistency between them,\nbut note that there is actually expected\
    \ to be a slight delay in the 'MISO direct'\nmode because the MISO output data\
    \ appears on the *falling* SCLK edge.\nAt 1440x900, this should be apparent.\n\
    \nThe `reg_outs` signal, if HIGH, specifies that the VGA output signals should\
    \ be\nregistered. If LOW, the raw outputs go directly to the VGA display (inc.\
    \ directly\nfrom the SPI memory when not in a buffered line).\n\nNOTE: This tries\
    \ to use `!CLK` (main clock, inverted) to drive the SPI SCLK directly,\nso that\
    \ we don't need a *faster* system CLK in order to manage extra states. It keeps\n\
    this `SCLK` output running constantly, relying on `/CS`.\n\nNOTE: Besides the\
    \ main design, I've got simple loopback test:\n\n*   `Test_in[2:0]` feeds a 3-input\
    \ logical `AND` which outputs to `Test_out`\n\nIt could be interesting, when we\
    \ get the actual chip back, to compare inputs to outputs\non an oscilloscope.\n\
    \nNOTE: The sync polarity of `hsync` and `vsync` will be determined by vga_mode.\n"
  how_to_test: "TBC.\n\nAttach an SPI memory chip with some data in it, e.g. SPI flash\
    \ ROM like W25Q10.\nAnything that accepts a 24-bit address and supports at least\
    \ 27MHz reads should be fine.\nI used a generic 25Q80 (8Mbit) that I pulled off\
    \ an ESP-01.\n\nAttach a VGA display:\n\n*   For simplicity, I suggest starting\
    \ with 640x480@60Hz mode. To do that, strap `vga_mode` to GND,\n    and use a\
    \ 25.000MHz (or ideally 25.175MHz) clock source. If you want to try 1440x900@60Hz\
    \ mode\n    instead, strap `vga_mode` high and use ~26.6175MHz as your clock source.\n\
    *   NOTE: VGA modes 0 and 1 output different VSYNC polarity, as recommended by\
    \ the spec.\n*   NOTE: I don't yet know what current a VGA display will sink per\
    \ each input, nor what current\n    the TT05 chip can safely supply per pin (or\
    \ in total), so for now I recommend using some\n    bigger resistors in series\
    \ with each signal, even if it means an impedance mismatch. Either\n    that,\
    \ or just properly buffer each TT05 chip output with something like a\n    74ALVC245\
    \ (https://www.digikey.com.au/en/products/detail/texas-instruments/SN74ALVC245DWR/374035).\n\
    \    Supposedly the Caravel IOs we're using might sink/source a max of 4mA, so\
    \ assuming they're at\n    3.3V we could use 1k&ohm; resistors (which would hit\
    \ 3.3mA per pin)...?\n*   `hsync`, `vsync` must be connected to the display; I\
    \ recommend buffering them (as above)\n    and then a 100&ohm; resistor then in\
    \ series with their respective VGA pins (for safe current\n    limiting) even\
    \ though 100&ohm; is more often done.\n*   For a minimum display up and running\
    \ quickly, attach the high bit (bit 2) of each of\n    `red`, `green`, and `blue`,\
    \ each via a 1k&ohm; resistor, to their respective VGA colour\n    channel input\
    \ pins. It might be pretty dark, but should be safe on Caravel IO pins if you\n\
    \    don't otherwise buffer them.\n*   For a much better display, use an RGB222\
    \ (upper 2 bits per channel), ensuring it buffers each of\n    those digital outputs.\
    \ A good option is Tiny VGA (see: https://tinytapeout.com/specs/pinouts/)\n"
  inputs:
  - 'In: vga_mode'
  - 'In: rst_mode'
  - 'In: reg_outs'
  - 'In: N/C'
  - 'In: N/C'
  - 'In: Test_in[0]'
  - 'In: Test_in[1]'
  - 'In: Test_in[2]'
  language: Verilog
  outputs:
  - 'Out: red[1]'
  - 'Out: green[1]'
  - 'Out: blue[1]'
  - 'Out: vsync'
  - 'Out: red[0]'
  - 'Out: green[0]'
  - 'Out: blue[0]'
  - 'Out: hsync'
  picture: doc/vga_spi_rom-display.jpg
  tag: test, experiment, spi, qspi, vga
  title: vga_spi_rom
project:
  source_files:
  - tt05_top.v
  - vga_sync.v
  - vga_spi_rom.v
  tiles: 1x1
  top_module: tt_um_algofoogle_vga_spi_rom_dup
  wokwi_id: 0
yaml_version: 4
