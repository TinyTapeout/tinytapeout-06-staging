documentation:
  author: Uri Shaked
  bidirectional:
  - cell_in[0]
  - cell_in[1]
  - cell_in[2]
  - cell_in[3]
  - cell_in[4]
  - cell_in[5]
  - cell_in[6]
  - cell_in[7]
  clock_hz: 0
  description: Silicon implementation of Conway's Game of Life
  discord: urish
  doc_link: ''
  external_hw: ''
  how_it_works: 'It is a silicon implementation of Conway''s Game of Life. The game
    is played on a 8x8 grid, and the rules are as follows:

    - Any live cell with fewer than two live neighbours dies, as if by underpopulation.

    - Any live cell with two or three live neighbours lives on to the next generation.

    - Any live cell with more than three live neighbours dies, as if by overpopulation.

    - Any dead cell with exactly three live neighbours becomes a live cell, as if
    by reproduction.

    '
  how_to_test: "Load initial grid row by row. \nEach row is loaded by selecting the\
    \ row number (using the row_sel[2:0] inputs),\nsetting the cell_in[7:0] inputs\
    \ to the desired state, and pulsing the wr_en input.\n\nOnce the grid is loaded,\
    \ set the en input to 1 to start the game. The game will advance one step in each\
    \ clock cycle.\nTo pause the game, set the en input to 0.\n\nTo view the current\
    \ state of the grid, set the row_sel[2:0] inputs to the desired row number, and\
    \ read the cell_out[7:0] outputs.\n"
  inputs:
  - row_sel[0]
  - row_sel[1]
  - rol_sel[2]
  - none
  - none
  - none
  - en
  - wr_en
  language: Verilog
  outputs:
  - cell_out[0]
  - cell_out[1]
  - cell_out[2]
  - cell_out[3]
  - cell_out[4]
  - cell_out[5]
  - cell_out[6]
  - cell_out[7]
  picture: ''
  tag: cell automata
  title: Game of Life 8x8 (siLife)
project:
  source_files:
  - cell.v
  - grid_8x8.v
  - silife.v
  tiles: 1x2
  top_module: tt_um_urish_silife_dup2
  wokwi_id: 0
yaml_version: 4
