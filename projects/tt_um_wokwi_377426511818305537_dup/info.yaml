documentation:
  author: Ivan M Bow
  bidirectional:
  - none
  - none
  - none
  - none
  - none
  - none
  - none
  - none
  clock_hz: The input drives the output frequency.
  description: Generates a PRBS that is configureable up to 16-bits.
  discord: wulfhednar
  doc_link: ''
  external_hw: Connection to SPI port, clock input, and analyzer to observe.
  how_it_works: "# Pseudo Random Binary Sequence (PRBS) generator.\n## Features:\n\
    - Implements a Galois LSFR with XOR taps for PRN generation.\n- Estimated 1.5MHz\
    \ Max output PRBS rate, at PRBS2.\n  - With 16-bit polynomial, 30-50 MHz may be\
    \ achievable.\n  - Max frequency reduces as PRBS size is reduced.\n    - Estimated\
    \ Max = (30 MHz / 2 ^ (16 - Nbits))\n- Has a fail safe all 0's check to ensure\
    \ the generator does not get locked up.\n- Clock Divider\n- SPI Interface\n  -\
    \ CLK, MOSI, CS\n  - SPI Mode 0, CS Active Low, MSB First\n- Register access for\
    \ configuration\n- Differential Output\n- Look-ahead Outputs\n  - For each of\
    \ the differential outputs, the next bit coming is output.\n  - Useful for waveshaping\
    \ or other information.\n- Logic added in so a bit cannot be XOR'ed if the previous\
    \ bit is disabled.\n  - The highest order bit is not XOR'ed with the output bit,\
    \ despite being in teh poly.\n\n## Registers\n- 4 registers control the PRBS generator\n\
    \  - Register 0: Command and Address of register to configure\n  - Register 1:\
    \ Clock Divider\n  - Register 2: Bits to enable\n  - Register 3: Polynomial XOR\
    \ taps to enable\n- Addressing and commands happen in a single CS session.\n \
    \ - CS low -> command + 2-bit address -> 8- or 16-bit data -> CS high\n- Reset_N\
    \ clears registers\n\n## Interface\n### Inputs:\n- SPI Chip Select\n- SPI Clock\n\
    - SPI Data (MOSI)\n\n### Outputs:\n- PRBS OUT\n- PRBS OUT +1 CLK\n- PRBS OUT (Inverse)\
    \ +1 CLK\n- PRBS OUT (Inverse)\n\n### Bidirectional:\n- none\n\n## Commands and\
    \ Registers\n- All commands and registers are sent to the device in SPI Mode 0,\
    \ MSB first.\n- Command structure is as follows:\n  - {Command Byte} {Data Byte\
    \ or Word}\n    - Command Byte contains the address of the register.\n    - The\
    \ Data Byte / Word is placed into the regester at that address.\n    - Register\
    \ 1 is 8-bit.\n    - Register 2 is 16-bit.\n    - Register 3 is 16-bit.\n\n###\
    \ Commands\n- 1: Write to Register\n- Currently there is only one command. Not\
    \ sure what else to command...\n\n### Register 0: Command & Address\n- : 7  :\
    \ 6  : 5  : 4  : 3  : 2  : 1  : 0  :\n- : C0 : X  : X  : X  : X  : X  : A1 : A0\
    \ :\n  - bits [7]   - 0: Nothing occurs.\n                 1: Writes the following\
    \ word into the register\n  - bits [6:2] - Do Not Care\n  - bits [1:0] - 2-bit\
    \ address of register to place the following data in.\n    - (Address 0 is this\
    \ register.)\n\n### Register 1: Clock Divider\n- : 7  : 6  : 5  : 4  : 3  : 2\
    \  : 1  : 0  :\n- : X  : X  : X  : X  : X  : D2 : D1 : D0 :\n  - bits [7:3] -\
    \ Do Not Care\n  - bits [2:0] - Clock Divider\n    - 0: /1\n    - 1: /2\n    -\
    \ 2: /4\n    - 3: /8\n    - 4: /16\n    - 5: /32\n    - 6: /64\n    - 7: /128\n\
    \n### Register 2: Polynomial Enable Bits\n- : 15 : 14 : 13 : 12 : 11 : 10 : 9\
    \  : 8  : 7  : 6  : 5  : 4  : 3  : 2  : 1  : 0  :\n- : E16: E15: E14: E13: E12:\
    \ E11: E10: E9 : E8 : E7 : E6 : E5 : E4 : E3 : E2 : E1 :\n  - bits [15:0] - E(n)\
    \ is the enable bit for the polynomial size.\n    - E(n) is 1 indexed to match\
    \ the polynomial exponents.\n      - 3-bit ploynomial is b'111 or h'7.\n     \
    \ - 12-bitpolynomial is b'111111111111 or h'FFF.\n    - Bits must be sequenctial\
    \ from bit 0. Other values are undefined.\n\n### Register 3: Polynomial Tap Bits\n\
    - : 15 : 14 : 13 : 12 : 11 : 10 : 9  : 8  : 7  : 6  : 5  : 4  : 3  : 2  : 1  :\
    \ 0  :\n- : E16: E15: E14: E13: E12: E11: E10: E9 : E8 : E7 : E6 : E5 : E4 : E3\
    \ : E2 : E1 :\n  - bits [15:0] - E(n) is the enable bit for the polynomial taps.\n\
    \    - E(n) is 1 indexed to match the polynomial exponents.\n      - x^4 + x^2\
    \ + 1 is b'1010 or h'A.\n      - x^5 + x^4 + x^3 + 1 is b'11100 or h'1C.\n   \
    \ - Bits must be sequenctial from bit 0. Other values are undefined.\n"
  how_to_test: '1) Reset to ensure known states.

    2) Configure the registers using SPI.

    3) Connect Input Clock (If not already done).

    4) Observe Output.

    '
  inputs:
  - spi_cs
  - spi_clk
  - spi_mosi
  - none
  - none
  - none
  - none
  - none
  language: Wokwi
  outputs:
  - prbs_out_0
  - prbs_out_1
  - prbs_out_n_1
  - prbs_out_n_0
  - none
  - none
  - none
  - none
  picture: ''
  tag: 'prn, prbs, spi, clock divider, registers, '
  title: PRBS Generator
project:
  tiles: 1x1
  top_module: tt_um_wokwi_377426511818305537_dup
  wokwi_id: 0
yaml_version: 4
